# This is a basic workflow to help you get started with Actions

name: Container Builds and Pushes

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: ECR Image Push & Lambda Function Deploy

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to AWS Lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          CLOUD_SECURE_URL: ${{ secrets.NETAPP_CLOUD_SECURE_URL }}
          CLOUD_SECURE_TOKEN: ${{ secrets.NETAPP_CLOUD_SECURE_TOKEN }}
          GET_DEVICE_NAME: ${{ secrets.NETAPP_DEVICE_NAME }}
          LAMBDA_FUNCTION_NAME: ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}
          # AWS_IAM_ROLE_ARN: ${{ secrets.AWS_IAM_ROLE_ARN }}
        run: |
          # aws lambda create-function --function-name ci-lambda-func --package-type Image --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY@$(docker images --digests | grep $ECR_REGISTRY/$ECR_REPOSITORY | grep $IMAGE_TAG | awk '{print $3}') --role $AWS_IAM_ROLE_ARN
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          sleep 60
          aws lambda update-function-configuration --function-name $LAMBDA_FUNCTION_NAME --environment "Variables={CLOUD_SECURE_URL=$CLOUD_SECURE_URL,CLOUD_SECURE_TOKEN=$CLOUD_SECURE_TOKEN,GET_DEVICE_NAME=$GET_DEVICE_NAME}" --timeout 10